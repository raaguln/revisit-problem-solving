# https://leetcode.com/problems/kth-largest-element-in-an-array/description/
# Time: O(klogn) - heappop is O(logn) and we do it k times
# Space: O(n)
import heapq

class Solution:
    def findKthLargest(self, nums: List[int], k: int) -> int:
        # Construct max heap
        for i in range(len(nums)):
            nums[i] = -nums[i]
        heapq.heapify(nums)

        kthElem = 0
        i = 1
        while i <= k:
            kthElem = heapq.heappop(nums)
            i += 1
        return -kthElem
    

# Use min heap instead - saves memory
class Solution:
    def findKthLargest(self, nums: List[int], k: int) -> int:
        # Create a min heap with the first k elements
        min_heap = nums[:k]
        heapq.heapify(min_heap)  # O(k) time to build the heap
        
        # Process remaining elements
        for num in nums[k:]:
            heapq.heappushpop(min_heap, num)  # O(log k) per operation

        return min_heap[0]  # kth largest element (smallest in heap)
    


        
# Time: O(n) - average case, O(n^2) - worst case
# Space: O(logn) - average case, O(n) - worst case
class Solution:
    def findKthLargest(self, nums: List[int], k: int) -> int:
        def quickSelect(arr, k):
            if len(arr) == 1:
                return arr[0]

            pivot = arr[len(arr) // 2]

            # Create left, middle, and right (ascending order)
            # Note - if you do descending order here, modify accordingly below
            left, middle, right = [], [], []
            for num in arr:
                if num > pivot:
                    right.append(num)
                elif num == pivot:
                    middle.append(num)
                else:
                    left.append(num)
            
            # kth largest (start searching from right)
            leftLen, midLen, rightLen = len(left), len(middle), len(right)
            if k < rightLen:
                return quickSelect(right, k)
            elif k < rightLen + midLen:
                return middle[0]
            else:
                return quickSelect(left, k - rightLen - midLen)
        
        # 0 based index
        return quickSelect(nums, k-1)
            
